# 1. Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

new_list = ('abc', 123, 4.5, complex(5, -3), True, None, [1, 2, 3], ('ab', 'bc', 'c'), {'e', 'f', 'g'})

for i in range(len(new_list)):
    print(f'{new_list[i]} - {type(new_list[i])}')


# 2. Для списка реализовать обмен значений соседних элементов, т.е.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте.
# для заполнения списка элементов необходимо использовать функцию input().

new_list2 = list(input('Введите произвольное количество символов для заполнения списка: '))

# через range(старт, стоп, шаг)
for k in range(0, len(new_list2)-1, 2):
    new_list2[k], new_list2[k+1] = new_list2[k+1], new_list2[k]

# через range(стоп)
# for k in range(len(new_list2)-1):
#     if k % 2 == 0:
#         new_list2[k], new_list2[k + 1] = new_list2[k + 1], new_list2[k]

print(new_list2)


# 3. Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.

seasons_dict = {
    12: 'зима', 1: 'зима', 2: 'зима',
    3: 'весна', 4: 'весна', 5: 'весна',
    6: 'лето', 7: 'лето', 8: 'лето',
    9: 'осень', 10: 'осень', 11: 'осень',
}

seasons_list = ('зима', 'зима', 'весна',
                'весна', 'весна', 'лето',
                'лето', 'лето', 'осень',
                'осень', 'осень', 'зима'
                )

user_month = int(input('Введите номер месяца: '))
print(f'{user_month}-й месяц это {seasons_dict.get(user_month)}')  # через dict
print(f'{user_month}-й месяц это {seasons_list[user_month-1]}')  # через list


# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки необходимо пронумеровать.
# Если слово длинное, выводить только первые 10 букв в слове.

user_list = input('Введите несколько слов через пробел: ').split()
for n in enumerate(user_list, 1):
    print(n[0], n[1][:10])


# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

rate_list = [7, 5, 3, 3, 2]
user_rate = int(input('Введите новый элемент рейтинга (целое число): '))

while True:
    if user_rate > rate_list[0]:
        rate_list.insert(0, user_rate)
        break
    else:
        rate_list.reverse()
        if user_rate in rate_list:
            rate_list.insert(rate_list.index(user_rate), user_rate)
        else:
            for m in rate_list:
                if user_rate < m:
                    rate_list.insert(rate_list.index(m), user_rate)
                    break
        rate_list.reverse()
        break
print(rate_list)


# 6. *Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит
# информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами
# (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [ (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”}) ]
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара,
# например название, а значение — список значений-характеристик, например список названий товаров.
# Пример:
# { “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”] }

goods = [(1, {"название": "компьютер", "цена": 20000, "количество": 5, "eд": "шт."}),
         (2, {"название": "принтер", "цена": 6000, "количество": 2, "eд": "шт."}),
         (3, {"название": "сканер", "цена": 2000, "количество": 7, "eд": "шт."})]

while input('Для заведения нового товара нажмите Enter, для выхода введите q: ').lower() != "q":
    new_element = (len(goods)+1, {"название": input('Введите название товара: '),
                                  "цена": int(input('Введите стоимость товара: ')),
                                  "количество": int(input('Введите количество товара: ')),
                                  "eд": input('Введите единицу измерения: ')})
    goods.append(new_element)

analytics = {}
pair = {}
for i in goods:
    for key, val in i[1].items():
        if analytics.get(key):  # если ключ уже существует
            value = analytics.get(key)
            value.append(val)
        else:  # заполнение ключей и значений
            pair = {key: [val]}
            analytics.update(pair)
analytics["eд"] = list(set(analytics.get("eд")))  # единицы измерения только уникальные
for key, val in analytics.items():
    print(key, val)
